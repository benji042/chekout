import{b4 as g,X as k,aw as x,a2 as O,bu as m,i as y,g as $,u as p,bv as b}from"./index-d4DvafWv.js";import{O as L,H as M,M as S}from"./isAddressEqual-BWdcMDrs-DK-Qttdg.js";class T extends p{constructor({callbackSelector:r,cause:a,data:o,extraData:d,sender:i,urls:t}){var n;super(a.shortMessage||"An error occurred while fetching for an offchain result.",{cause:a,metaMessages:[...a.metaMessages||[],(n=a.metaMessages)!=null&&n.length?"":[],"Offchain Gateway Call:",t&&["  Gateway URL(s):",...t.map(u=>`    ${b(u)}`)],`  Sender: ${i}`,`  Data: ${o}`,`  Callback selector: ${r}`,`  Extra data: ${d}`].flat(),name:"OffchainLookupError"})}}class R extends p{constructor({result:r,url:a}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${b(a)}`,`Response: ${y(r)}`],name:"OffchainLookupResponseMalformedError"})}}class C extends p{constructor({sender:r,to:a}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${a}`,`OffchainLookup sender address: ${r}`],name:"OffchainLookupSenderMismatchError"})}}const v="0x556f1830",E={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function A(c,{blockNumber:r,blockTag:a,data:o,to:d}){const{args:i}=g({data:o,abi:[E]}),[t,n,u,l,s]=i,{ccipRead:e}=c,h=e&&typeof(e==null?void 0:e.request)=="function"?e.request:q;try{if(!L(d,t))throw new C({sender:t,to:d});const f=n.includes(M)?await S({data:u,ccipRequest:h}):await h({data:u,sender:t,urls:n}),{data:w}=await k(c,{blockNumber:r,blockTag:a,data:x([l,O([{type:"bytes"},{type:"bytes"}],[f,s])]),to:d});return w}catch(f){throw new T({callbackSelector:l,cause:f,data:o,extraData:s,sender:t,urls:n})}}async function q({data:c,sender:r,urls:a}){var d;let o=new Error("An unknown error occurred.");for(let i=0;i<a.length;i++){const t=a[i],n=t.includes("{data}")?"GET":"POST",u=n==="POST"?{data:c,sender:r}:void 0,l=n==="POST"?{"Content-Type":"application/json"}:{};try{const s=await fetch(t.replace("{sender}",r.toLowerCase()).replace("{data}",c),{body:JSON.stringify(u),headers:l,method:n});let e;if((d=s.headers.get("Content-Type"))!=null&&d.startsWith("application/json")?e=(await s.json()).data:e=await s.text(),!s.ok){o=new m({body:u,details:e!=null&&e.error?y(e.error):s.statusText,headers:s.headers,status:s.status,url:t});continue}if(!$(e)){o=new R({result:e,url:t});continue}return e}catch(s){o=new m({body:u,details:s.message,url:t})}}throw o}export{q as ccipRequest,A as offchainLookup,E as offchainLookupAbiItem,v as offchainLookupSignature};
