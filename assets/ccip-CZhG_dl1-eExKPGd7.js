import{b4 as g,Z as k,aw as x,a2 as S,bh as m,k as y,o as L,m as p,bi as b}from"./index-C1smojh8.js";import{S as O,H as T,M as $}from"./isAddressEqual-BTKkQkTZ-7bLlKe6D.js";class M extends p{constructor({callbackSelector:r,cause:a,data:n,extraData:d,sender:u,urls:t}){var o;super(a.shortMessage||"An error occurred while fetching for an offchain result.",{cause:a,metaMessages:[...a.metaMessages||[],(o=a.metaMessages)!=null&&o.length?"":[],"Offchain Gateway Call:",t&&["  Gateway URL(s):",...t.map(i=>`    ${b(i)}`)],`  Sender: ${u}`,`  Data: ${n}`,`  Callback selector: ${r}`,`  Extra data: ${d}`].flat(),name:"OffchainLookupError"})}}class R extends p{constructor({result:r,url:a}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${b(a)}`,`Response: ${y(r)}`],name:"OffchainLookupResponseMalformedError"})}}class C extends p{constructor({sender:r,to:a}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${a}`,`OffchainLookup sender address: ${r}`],name:"OffchainLookupSenderMismatchError"})}}const G="0x556f1830",E={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function P(c,{blockNumber:r,blockTag:a,data:n,to:d}){const{args:u}=g({data:n,abi:[E]}),[t,o,i,l,s]=u,{ccipRead:e}=c,h=e&&typeof(e==null?void 0:e.request)=="function"?e.request:q;try{if(!O(d,t))throw new C({sender:t,to:d});const f=o.includes(T)?await $({data:i,ccipRequest:h}):await h({data:i,sender:t,urls:o}),{data:w}=await k(c,{blockNumber:r,blockTag:a,data:x([l,S([{type:"bytes"},{type:"bytes"}],[f,s])]),to:d});return w}catch(f){throw new M({callbackSelector:l,cause:f,data:n,extraData:s,sender:t,urls:o})}}async function q({data:c,sender:r,urls:a}){var d;let n=new Error("An unknown error occurred.");for(let u=0;u<a.length;u++){const t=a[u],o=t.includes("{data}")?"GET":"POST",i=o==="POST"?{data:c,sender:r}:void 0,l=o==="POST"?{"Content-Type":"application/json"}:{};try{const s=await fetch(t.replace("{sender}",r.toLowerCase()).replace("{data}",c),{body:JSON.stringify(i),headers:l,method:o});let e;if((d=s.headers.get("Content-Type"))!=null&&d.startsWith("application/json")?e=(await s.json()).data:e=await s.text(),!s.ok){n=new m({body:i,details:e!=null&&e.error?y(e.error):s.statusText,headers:s.headers,status:s.status,url:t});continue}if(!L(e)){n=new R({result:e,url:t});continue}return e}catch(s){n=new m({body:i,details:s.message,url:t})}}throw n}export{q as ccipRequest,P as offchainLookup,E as offchainLookupAbiItem,G as offchainLookupSignature};
