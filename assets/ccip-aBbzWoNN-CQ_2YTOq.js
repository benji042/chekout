import{ah as g,N as k,at as x,au as L,av as O,a4 as S,s as T,aw as m,a8 as y,b as $,q as f,ax as b}from"./index-2bjU_wYl.js";class R extends f{constructor({callbackSelector:r,cause:e,data:o,extraData:d,sender:i,urls:t}){var n;super(e.shortMessage||"An error occurred while fetching for an offchain result.",{cause:e,metaMessages:[...e.metaMessages||[],(n=e.metaMessages)!=null&&n.length?"":[],"Offchain Gateway Call:",t&&["  Gateway URL(s):",...t.map(u=>`    ${b(u)}`)],`  Sender: ${i}`,`  Data: ${o}`,`  Callback selector: ${r}`,`  Extra data: ${d}`].flat(),name:"OffchainLookupError"})}}class M extends f{constructor({result:r,url:e}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${b(e)}`,`Response: ${y(r)}`],name:"OffchainLookupResponseMalformedError"})}}class C extends f{constructor({sender:r,to:e}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${e}`,`OffchainLookup sender address: ${r}`],name:"OffchainLookupSenderMismatchError"})}}const E="0x556f1830",D={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function v(c,{blockNumber:r,blockTag:e,data:o,to:d}){const{args:i}=g({data:o,abi:[D]}),[t,n,u,l,s]=i,{ccipRead:a}=c,h=a&&typeof(a==null?void 0:a.request)=="function"?a.request:N;try{if(!k(d,t))throw new C({sender:t,to:d});const p=n.includes(x)?await L({data:u,ccipRequest:h}):await h({data:u,sender:t,urls:n}),{data:w}=await O(c,{blockNumber:r,blockTag:e,data:S([l,T([{type:"bytes"},{type:"bytes"}],[p,s])]),to:d});return w}catch(p){throw new R({callbackSelector:l,cause:p,data:o,extraData:s,sender:t,urls:n})}}async function N({data:c,sender:r,urls:e}){var d;let o=new Error("An unknown error occurred.");for(let i=0;i<e.length;i++){const t=e[i],n=t.includes("{data}")?"GET":"POST",u=n==="POST"?{data:c,sender:r}:void 0,l=n==="POST"?{"Content-Type":"application/json"}:{};try{const s=await fetch(t.replace("{sender}",r.toLowerCase()).replace("{data}",c),{body:JSON.stringify(u),headers:l,method:n});let a;if((d=s.headers.get("Content-Type"))!=null&&d.startsWith("application/json")?a=(await s.json()).data:a=await s.text(),!s.ok){o=new m({body:u,details:a!=null&&a.error?y(a.error):s.statusText,headers:s.headers,status:s.status,url:t});continue}if(!$(a)){o=new M({result:a,url:t});continue}return a}catch(s){o=new m({body:u,details:s.message,url:t})}}throw o}export{N as ccipRequest,v as offchainLookup,D as offchainLookupAbiItem,E as offchainLookupSignature};
